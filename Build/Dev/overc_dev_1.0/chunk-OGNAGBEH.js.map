{
  "version": 3,
  "sources": ["src/app/core/Auth/auth.service.ts"],
  "sourcesContent": ["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\nimport { Subscription } from 'rxjs';\r\nimport { CommonServiceService } from '../../common-service/common-service.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  redirectUrl: any;\r\n  user: any;\r\n  userData!: boolean;\r\n  token!: string;\r\n  // Subscription\r\n  sub = new Subscription();\r\n  constructor(\r\n    private http: HttpClient,\r\n    private router: Router,\r\n    private spin: NgxSpinnerService,\r\n    private cs: CommonServiceService,\r\n  ) {\r\n    this.userData = true;\r\n  }\r\n\r\n  get isLoggedIn() {\r\n    return sessionStorage.getItem(\"user\") ? true : false;\r\n  }\r\n  get isMenu() {\r\n    return sessionStorage.getItem(\"menu\") ? true : false;\r\n  }\r\n  get MenuData() {\r\n    return JSON.parse(sessionStorage.getItem(\"menu\") as '[]')\r\n  }\r\n  isuserdata() {\r\n    if (!this.isLoggedIn)\r\n      this.logout();\r\n\r\n  }\r\n  isMenudata() {\r\n    if (!this.isMenu)\r\n      this.logout();\r\n  }\r\n\r\n\r\nlogout(){\r\n  this.router.navigate(['']);\r\n  sessionStorage.clear();\r\n }\r\n\r\nngOnDestroy(){\r\n  \r\n}\r\n\r\n  login(user : any) {\r\n    sessionStorage.clear();\r\n    localStorage.clear();\r\n    return new Promise((resolve, reject) => {\r\n      this.spin.show();\r\n      this.sub.add(\r\n        this.http.get<any>(`/overc-idmaster-service/login?userID=${user.userName}&password=${user.password}`).subscribe({next: (res) =>{\r\n          sessionStorage.setItem(\"user\", JSON.stringify(res));\r\n          this.router.navigate(['/main/idMaster/language']);\r\n          this.spin.hide();\r\n        }, error: (err) => {\r\n          this.spin.hide();\r\n          this.cs.commonerrorNew(err);\r\n        }})\r\n      );\r\n    });\r\n  }\r\n\r\n \r\n  refreshToken(apiName: any) {\r\n    return this.http.post<any>('/auth-token', {\r\n      clientId: \"pixeltrice\",\r\n      clientSecretKey: \"pixeltrice-secret-key\",\r\n      grantType: \"password\",\r\n      oauthPassword: \"overc\",\r\n      oauthUserName: \"overc\",\r\n      apiName: apiName\r\n    });\r\n  }\r\n  public saveToken(token: any, apiName: string): void {\r\n    window.sessionStorage.removeItem(apiName);\r\n    window.sessionStorage.setItem(apiName, token);\r\n  }\r\n  public saveTokenfrom(token: any, apiName: string): void {\r\n    window.sessionStorage.removeItem(apiName);\r\n    window.sessionStorage.setItem(apiName, token.access_token);\r\n  }\r\n\r\n  public getToken(apiName: string): string | null {\r\n    return window.sessionStorage.getItem(apiName);\r\n  }\r\n  get userID() {\r\n    if (sessionStorage.getItem(\"user\"))\r\n     return JSON.parse(sessionStorage.getItem(\"user\") as '{}').userId;\r\n  }\r\n  get companyId() {\r\n    if (sessionStorage.getItem(\"user\"))\r\n      return JSON.parse(sessionStorage.getItem(\"user\") as '{}').companyId;\r\n  }\r\n  get languageId() {\r\n    if (sessionStorage.getItem(\"user\"))\r\n    return JSON.parse(sessionStorage.getItem(\"user\") as '{}').languageId;\r\n  }\r\n  get partnerId() {\r\n    if (sessionStorage.getItem(\"user\"))\r\n     return JSON.parse(sessionStorage.getItem(\"user\") as '{}').partnerId;\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;AAUM,IAAO,eAAP,MAAO,aAAW;EAOtB,YACU,MACA,QACA,MACA,IAAwB;AAHxB,SAAA,OAAA;AACA,SAAA,SAAA;AACA,SAAA,OAAA;AACA,SAAA,KAAA;AALV,SAAA,MAAM,IAAI,aAAY;AAOpB,SAAK,WAAW;EAClB;EAEA,IAAI,aAAU;AACZ,WAAO,eAAe,QAAQ,MAAM,IAAI,OAAO;EACjD;EACA,IAAI,SAAM;AACR,WAAO,eAAe,QAAQ,MAAM,IAAI,OAAO;EACjD;EACA,IAAI,WAAQ;AACV,WAAO,KAAK,MAAM,eAAe,QAAQ,MAAM,CAAS;EAC1D;EACA,aAAU;AACR,QAAI,CAAC,KAAK;AACR,WAAK,OAAM;EAEf;EACA,aAAU;AACR,QAAI,CAAC,KAAK;AACR,WAAK,OAAM;EACf;EAGF,SAAM;AACJ,SAAK,OAAO,SAAS,CAAC,EAAE,CAAC;AACzB,mBAAe,MAAK;EACrB;EAED,cAAW;EAEX;EAEE,MAAM,MAAU;AACd,mBAAe,MAAK;AACpB,iBAAa,MAAK;AAClB,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAU;AACrC,WAAK,KAAK,KAAI;AACd,WAAK,IAAI,IACP,KAAK,KAAK,IAAS,wCAAwC,KAAK,QAAQ,aAAa,KAAK,QAAQ,EAAE,EAAE,UAAU,EAAC,MAAM,CAAC,QAAO;AAC7H,uBAAe,QAAQ,QAAQ,KAAK,UAAU,GAAG,CAAC;AAClD,aAAK,OAAO,SAAS,CAAC,yBAAyB,CAAC;AAChD,aAAK,KAAK,KAAI;MAChB,GAAG,OAAO,CAAC,QAAO;AAChB,aAAK,KAAK,KAAI;AACd,aAAK,GAAG,eAAe,GAAG;MAC5B,EAAC,CAAC,CAAC;IAEP,CAAC;EACH;EAGA,aAAa,SAAY;AACvB,WAAO,KAAK,KAAK,KAAU,eAAe;MACxC,UAAU;MACV,iBAAiB;MACjB,WAAW;MACX,eAAe;MACf,eAAe;MACf;KACD;EACH;EACO,UAAU,OAAY,SAAe;AAC1C,WAAO,eAAe,WAAW,OAAO;AACxC,WAAO,eAAe,QAAQ,SAAS,KAAK;EAC9C;EACO,cAAc,OAAY,SAAe;AAC9C,WAAO,eAAe,WAAW,OAAO;AACxC,WAAO,eAAe,QAAQ,SAAS,MAAM,YAAY;EAC3D;EAEO,SAAS,SAAe;AAC7B,WAAO,OAAO,eAAe,QAAQ,OAAO;EAC9C;EACA,IAAI,SAAM;AACR,QAAI,eAAe,QAAQ,MAAM;AAChC,aAAO,KAAK,MAAM,eAAe,QAAQ,MAAM,CAAS,EAAE;EAC7D;EACA,IAAI,YAAS;AACX,QAAI,eAAe,QAAQ,MAAM;AAC/B,aAAO,KAAK,MAAM,eAAe,QAAQ,MAAM,CAAS,EAAE;EAC9D;EACA,IAAI,aAAU;AACZ,QAAI,eAAe,QAAQ,MAAM;AACjC,aAAO,KAAK,MAAM,eAAe,QAAQ,MAAM,CAAS,EAAE;EAC5D;EACA,IAAI,YAAS;AACX,QAAI,eAAe,QAAQ,MAAM;AAChC,aAAO,KAAK,MAAM,eAAe,QAAQ,MAAM,CAAS,EAAE;EAC7D;;;mBArGW,cAAW,mBAAA,UAAA,GAAA,mBAAA,MAAA,GAAA,mBAAA,iBAAA,GAAA,mBAAA,oBAAA,CAAA;AAAA;gFAAX,cAAW,SAAX,aAAW,WAAA,YAFV,OAAM,CAAA;AAEd,IAAO,cAAP;",
  "names": []
}
