{
  "version": 3,
  "sources": ["src/app/common-service/common-api.service.ts", "src/app/main/id-masters/province/province.service.ts", "src/app/main/id-masters/city/city.service.ts", "src/app/main/id-masters/country/country.service.ts"],
  "sourcesContent": ["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\nimport { catchError, of, forkJoin } from 'rxjs';\r\nimport { AuthService } from '../core/core';\r\nimport { CommonServiceService } from './common-service.service';\r\nimport { MessageService } from 'primeng/api';\r\n\r\nexport interface dropdownelement {\r\n  key: any;\r\n  value: any;\r\n  referenceField?: any;\r\n}\r\n\r\nexport interface dropdownelement1 {\r\n  value: any;\r\n  label: any;\r\n  referenceField?: any;\r\n}\r\nexport interface dropdownelement2 {\r\n  key: any;\r\n  value: any;\r\n  referenceField?: any;\r\n  languageId?: any;\r\n  companyId?: any;\r\n\r\n}\r\nexport interface dropdownelement3 {\r\n  value: any;\r\n  label: any;\r\n  languageId?: any;\r\n  companyId?: any;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CommonAPIService {\r\n\r\n  constructor(private http: HttpClient, private cs: CommonServiceService, private auth: AuthService, private spin: NgxSpinnerService, public messageService: MessageService) { }\r\n\r\n  setup = '/overc-idmaster-service/';\r\n  dropdownlist: any = {\r\n    setup: {\r\n      language:{url:this.setup + 'language',key:{key:'languageId',value:'languageDescription'}},\r\n      company:{url:this.setup + 'company',key:{key:'companyId',value:'companyName'}},\r\n      country:{url:this.setup + 'country',key:{key:'countryId',value:'countryName', languageId :'languageId', companyId: 'companyId'}},\r\n      province:{url:this.setup + 'province',key:{key:'provinceId',value:'provinceName', languageId :'languageId', companyId: 'companyId'}},\r\n      menu:{url:this.setup + 'menu', key:{key:'menuId',value:'menuName', languageId :'languageId', companyId: 'companyId'}},\r\n      subMenu:{url:this.setup + 'menu', key:{key:'subMenuId',value:'subMenuName', languageId :'languageId', companyId: 'companyId'}},\r\n      authorizationObject:{url:this.setup + 'menu', key:{key:'authorizationObjectId',value:'authorizationObjectValue', languageId :'languageId', companyId: 'companyId'}},\r\n      district:{url:this.setup + 'district',key:{key:'districtId',value:'districtName', languageId :'languageId', companyId: 'companyId'}},\r\n      subProduct: { url: this.setup + 'subProduct', key: { key: 'subProductId', value: 'subProductName', languageId: 'languageId', companyId: 'companyId' } },\r\n      product: { url: this.setup + 'product', key: { key: 'productId', value: 'productName', languageId: 'languageId', companyId: 'companyId' } },\r\n      customer: { url: this.setup + 'customer', key: { key: 'customerId', value: 'customerName', languageId: 'languageId', companyId: 'companyId' } },\r\n      city: { url: this.setup + 'city', key: { key: 'cityId', value: 'cityName', languageId: 'languageId', companyId: 'companyId' } },\r\n      serviceType: { url: this.setup + 'serviceType', key: { key: 'serviceTypeId', value: 'serviceTypeText', languageId: 'languageId', companyId: 'companyId' } },\r\n      \r\n    },\r\n  }\r\n \r\n\r\n\r\n  getalldropdownlist(url: string[]) {\r\n    let observableBatch: any[] = [];\r\n    url.forEach((url: string) => { observableBatch.push(this.http.get<any>(url).pipe(catchError(err => of(err)))) });\r\n    return forkJoin(observableBatch);\r\n  }\r\n\r\n  foreachlist(list: any, val: { key: any, value: any }, _filter: any = {}, addblank: boolean = false,) {\r\n    let dropdownlist: dropdownelement[] = [];\r\n    let dropdownlist1: dropdownelement1[] = [];\r\n    let filter = list;\r\n    if (_filter)\r\n      filter = this.cs.filterArray(list, _filter);\r\n    if (addblank)\r\n      dropdownlist.push({ key: '', value: '' });\r\n    for (const l of filter) {\r\n      let filter2 = this.cs.filterArray(dropdownlist, { key: l[val.key] })\r\n      if (filter2.length == 0)\r\n      dropdownlist1.push({ value: l[val.key], label: l[val.key] + ' - ' + l[val.value] });\r\n    }\r\n    return dropdownlist1.sort((a, b) => (a.value > b.value) ? 1 : -1);\r\n  }\r\n\r\n  forLanguageFilter(list: any, val: { key: any, value: any, languageId: any, companyId: any }, _filter: any = {}, addblank: boolean = false,) {\r\n    let dropdownlist: dropdownelement2[] = [];\r\n    let dropdownlist1: dropdownelement3[] = [];\r\n    let dropdownlist2: dropdownelement3[] = [];\r\n    let filter = list;\r\n    if (_filter)\r\n      filter = this.cs.filterArray(list, _filter);\r\n    if (addblank)\r\n      dropdownlist.push({ key: '', value: '', languageId: '', companyId: '' });\r\n    for (const l of filter) {\r\n      let filter2 = this.cs.filterArray(dropdownlist, { key: l[val.key] })\r\n      if (filter2.length == 0)\r\n      dropdownlist1.push({ value: l[val.key], label: l[val.key] + ' - ' + l[val.value], languageId: l[val.languageId], companyId: l[val.companyId]});\r\n    }\r\n    dropdownlist1.forEach(x=> {\r\n      if(this.auth.languageId == x.languageId && this.auth.companyId == x.companyId){\r\n        dropdownlist2.push(x)\r\n      }\r\n    })\r\n    return dropdownlist2.sort((a, b) => (a.value > b.value) ? 1 : -1);\r\n  }\r\n\r\n}\r\n", "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { AuthService } from '../../../core/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProvinceService {\r\n\r\n  constructor(private http: HttpClient, private auth: AuthService) { }\r\n\r\n  Get() {\r\n\r\n  }\r\n\r\n  Create(obj: any) {\r\n    return this.http.post<any>('/overc-idmaster-service/province', obj);\r\n  }\r\n\r\n  Update(obj: any) {\r\n    return this.http.patch<any>('/overc-idmaster-service/province/' + obj.provinceId + '?companyId=' + this.auth.companyId + '&countryId=' + obj.countryId + '&languageId=' + this.auth.languageId, obj);\r\n  }\r\n\r\n  Delete(obj: any) {\r\n    return this.http.delete<any>('/overc-idmaster-service/province/' + obj.provinceId + '?companyId=' + this.auth.companyId + '&countryId=' + obj.countryId + '&languageId=' + this.auth.languageId );\r\n  }\r\n\r\n  search(obj: any) {\r\n    return this.http.post<any>('/overc-idmaster-service/province/find', obj);\r\n  }\r\n\r\n}\r\n", "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { AuthService } from '../../../core/Auth/auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CityService {\r\n\r\n  \r\n  constructor(private http: HttpClient, private auth: AuthService) { }\r\n\r\n\r\n  Get(cityId: string) {\r\n    return this.http.get<any>('/overc-idmaster-service/city/' + cityId);\r\n  }\r\n \r\n  Create(obj: any) {\r\n    return this.http.post<any>('/overc-idmaster-service/city', obj);\r\n  }\r\n\r\n  Update(obj: any) {\r\n    return this.http.patch<any>('/overc-idmaster-service/city/'+ obj.cityId +'?languageId='+ this.auth.languageId \r\n      +'&companyId='+ this.auth.companyId + '&countryId='+ obj.countryId + '&provinceId='+ obj.provinceId\r\n      +'&districtId='+obj.districtId, obj);\r\n  }\r\n\r\n  Delete(obj: any) {\r\n    return this.http.delete<any>('/overc-idmaster-service/city/' + obj.cityId +'?languageId='+ this.auth.languageId +'&companyId='+ this.auth.companyId\r\n      + '&countryId='+ obj.countryId + '&provinceId='+ obj.provinceId +'&districtId='+obj.districtId);\r\n  }\r\n\r\n  search(obj: any) {\r\n    return this.http.post<any>('/overc-idmaster-service/city/find', obj);\r\n  }\r\n}\r\n\r\n", "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { AuthService } from '../../../core/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CountryService {\r\n\r\n  constructor(private http: HttpClient, private auth: AuthService) { }\r\n\r\n\r\n  Get(countryId: string) {\r\n    return this.http.get<any>('/overc-idmaster-service/country/' + countryId);\r\n  }\r\n\r\n  Create(obj: any) {\r\n    return this.http.post<any>('/overc-idmaster-service/country', obj);\r\n  }\r\n\r\n  Update(obj: any) {\r\n    return this.http.patch<any>('/overc-idmaster-service/country/'+ obj.countryId +'?languageId='+ this.auth.languageId +'&companyId='+ this.auth.companyId, obj);\r\n  }\r\n\r\n  Delete(countryId: string) {\r\n    return this.http.delete<any>('/overc-idmaster-service/country/' + countryId +'?languageId='+ this.auth.languageId +'&companyId='+ this.auth.companyId);\r\n  }\r\n\r\n  search(obj: any) {\r\n    return this.http.post<any>('/overc-idmaster-service/country/find', obj);\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": ["url"]
}
